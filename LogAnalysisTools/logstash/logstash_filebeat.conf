input {
kafka {
bootstrap_servers => ["192.168.1.x:9092"]
topics => "filebeat"
auto_offset_reset => "latest"
codec => json {}
}
}

filter {

if [fields][log_type] == "apache_access"  {
      grok {
         match => [
         "message" , "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[(?<mytimestamp>%{MONTHDAY:monthday}/%{MONTH:month}/%{YEAR:year}:%{TIME:time} %{INT:zone})\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-)?(?: %{GREEDYDATA:log_message})?"
         ]
         overwrite => [ "message" ]
      }

	mutate {
               gsub => [ 
                    "zone", "\+", ".",
                    "zone", "-", ".",
                    "month", "Jan", "01",
                    "month", "Feb", "02",
                    "month", "Mar", "03",
                    "month", "Apr", "04",
                    "month", "May", "05",
                    "month", "Jun", "06",
                    "month", "Jul", "07",
                    "month", "Aug", "08",
                    "month", "Sep", "09",
                    "month", "Oct", "10",
                    "month", "Nov", "11",
                    "month", "Dec", "12"

                       ]
               }

      mutate {
         convert => ["response", "integer"]
         convert => ["bytes", "integer"]
         convert => ["responsetime", "float"]
      
      }

     mutate
      {
         add_field =>
         {
           "timestamp" => "%{year}-%{month}-%{monthday}T%{time}%{zone}Z"
         }
      }
 
    if [clientip] =~ /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        {
        geoip {

         source => "clientip"
        }
        }
      date {
         match => [ "timestamp" , "ISO8601" ]
      }
      useragent {
         source => "agent"
      }

     mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

       mutate {
         remove_field => [ "mytimestamp","year","month","monthday","time","zone","@timestamp","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
      }
   }

if [fields][log_type] == "apache_error"  {

 grok {
         match => ["message", "\[(?<mytimestamp>%{DAY:day}%{SPACE}%{MONTH:month}%{SPACE}%{MONTHDAY:monthday}%{SPACE}%{TIME:time}%{SPACE}%{YEAR:year})\] (?:\[%{NOTSPACE:severity}\])?(?:%{SPACE})?(?:\[client %{IPORHOST:clientip}\])?(?:%{SPACE})?(?:\(%{DATA:response}\))?%{GREEDYDATA:request}"]
         overwrite => [ "message" ]
}
	 mutate {
               gsub => [
                    "month", "Jan", "01",
                    "month", "Feb", "02",
                    "month", "Mar", "03",
                    "month", "Apr", "04",
                    "month", "May", "05",
                    "month", "Jun", "06",
                    "month", "Jul", "07",
                    "month", "Aug", "08",
                    "month", "Sep", "09",
                    "month", "Oct", "10",
                    "month", "Nov", "11",
                    "month", "Dec", "12"

                       ]
               }

      mutate
      {
         add_field =>
         {
	    "timestamp" => "%{year}-%{month}-%{monthday}T%{time}.000Z"
         }
      }
      if [clientip] =~ /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        {
        geoip {
         source => "clientip"
        }
        }
      date {
	  match => [ "timestamp", "ISO8601" ]
	
      }
    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }


       mutate
      {
            remove_field => ["day","monthday","month","time","year","mytimestamp","@timestamp","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
  }
}

if [fields][log_type] == "system_error"  {

 grok {
         match => ["message", "%{DATA:severity} \[(?<mytimestamp>%{MONTHDAY:monthday}/%{MONTH:month}/%{YEAR:year}:%{TIME:time} %{INT:zone})\] %{GREEDYDATA:log_message}"]
         overwrite => [ "message" ]
}


	 mutate {
               gsub => [
                    "zone", "\+", ".",
                    "zone", "-", ".",
                    "month", "Jan", "01",
                    "month", "Feb", "02",
                    "month", "Mar", "03",
                    "month", "Apr", "04",
                    "month", "May", "05",
                    "month", "Jun", "06",
                    "month", "Jul", "07",
                    "month", "Aug", "08",
                    "month", "Sep", "09",
                    "month", "Oct", "10",
                    "month", "Nov", "11",
                    "month", "Dec", "12",
                    "severity", "A", "Alert",
		    "severity", "C", "Critical",
                    "severity", "D", "Debugging",
                    "severity", "d", "Detailed",
                    "severity", "E", "Normal",
                    "severity", "I", "Informational",
                    "severity", "N", "Notice",
                    "severity", "W", "Warning",
                    "severity", "X", "Emergency"
                       ]
               }
      mutate
      {
         add_field =>
         {
           "timestamp" => "%{year}-%{month}-%{monthday}T%{time}%{zone}Z"
         }
      }

      date {
	  match => [ "timestamp", "ISO8601" ]
	
      }
    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }
      
       mutate
      {
            remove_field => ["day","zone","monthday","month","time","year","mytimestamp","@timestamp","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
  }
}


if [fields][log_type] == "nginx_access" {
      grok {
        match => { "message" => ["%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[(?<mytimestamp>%{MONTHDAY:monthday}/%{MONTH:month}/%{YEAR:year}:%{TIME:time} %{INT:zone})\] \"%{WORD:verb} %{DATA:url]} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} %{NUMBER:bytes} \"%{DATA:referrer}\" \"%{DATA:agent}\""] }
        overwrite => [ "message" ] 
      }

     mutate {
               gsub => [ 
                    "zone", "\+", ".",
                    "zone", "-", ".",
                    "month", "Jan", "01", 
                    "month", "Feb", "02",
                    "month", "Mar", "03",
                    "month", "Apr", "04",
                    "month", "May", "05",
                    "month", "Jun", "06",
                    "month", "Jul", "07",
                    "month", "Aug", "08",
                    "month", "Sep", "09",
                    "month", "Oct", "10",
                    "month", "Nov", "11",
                    "month", "Dec", "12"
    
                       ]
               }
 	
      mutate {
       convert => { "bytes" => "integer" } 
       }

      mutate
      {
         add_field =>
         {
           "timestamp" => "%{year}-%{month}-%{monthday}T%{time}%{zone}Z"
         }
      }
       date {
         match => [ "timestamp" , "ISO8601" ]
      }

      useragent { 
        source => "agent"
        target => "user_agent"
        remove_field => "agent"
      }
     geoip { source => "clientip" }
      
          mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }


      mutate { 
         remove_field => [ "mytimestamp","year","month","monthday","time","zone","@timestamp","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
      }
 }

if [fields][log_type] == "nginx_error" {
grok { match => { "message" => ["(?<mytimestamp>%{YEAR:year}[./]%{MONTHNUM:monthnum}[./]%{MONTHDAY:monthday} %{TIME:time}) \[%{WORD:severity}\] %{INT:pid}\#%{INT:tid}: \*%{INT:cid} %{DATA:log_message}, client: %{IPORHOST:clientip}, server: (?:%{DATA:server_name}|), request: \"%{WORD:method} %{DATA:url} HTTP/%{NUMBER:http_version}\"(?:, upstream: \"%{DATA:upstream}\")?(?:, host: \"%{URIHOST:host}\")?(?:, referrer: \"%{DATA:referrer}\")?"]}
overwrite => [ "message" ]
}

 mutate
      {
         add_field =>
         {
            "timestamp" => "%{year}-%{monthnum}-%{monthday}T%{time}.000Z"
         }
      }

geoip {

         source => "clientip"
                 } 

date {
          match => [ "timestamp", "ISO8601" ]

      }

           mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

       mutate
      {
            remove_field => ["monthnum","time","year","@timestamp","mytimestamp","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
      }  

}

if [fields][log_type] == "syslog_message" {
grok {
      match => { "message" => "(?<mytimestamp>%{MONTH:month} +%{MONTHDAY:monthday} %{TIME:time}) %{SYSLOGHOST:hostname} (%{USERNAME:program}|(?:%{USERNAME:program}\[%{INT:pid}\]))?(?:%{SPACE})?(?:%{WORD})?: %{GREEDYDATA:log_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
    }
   

  mutate {
               gsub => [
                    "month", "Jan", "01",
                    "month", "Feb", "02",
                    "month", "Mar", "03",
                    "month", "Apr", "04",
                    "month", "May", "05",
                    "month", "Jun", "06",
                    "month", "Jul", "07",
                    "month", "Aug", "08",
                    "month", "Sep", "09",
                    "month", "Oct", "10",
                    "month", "Nov", "11",
                    "month", "Dec", "12"

                       ]
               }

ruby
{
   code => "
           temp=Time.new;
  	   temp=temp.localtime.strftime ('%Y');
	   event.set('date_year',temp);
	   "
}
  mutate
      {
         add_field =>
         {
            "timestamp" => "%{date_year}-%{month}-%{monthday}T%{time}.000Z"
         }
      }
   

  date {
          match => [ "timestamp", "ISO8601" ]

      }

          mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

       mutate
      {
            remove_field => ["monthday","month","time","mytimestamp","@timestamp","received_at","date_year","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
       }
 

}


if [fields][log_type] == "yumlog_message" {
grok {
      match => { "message" => "(?<mytimestamp>%{MONTH:month} +%{MONTHDAY:monthday} %{TIME:time}) %{DATA:program}: %{GREEDYDATA:log_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
 
    }

  mutate {
               gsub => [
                    "month", "Jan", "01",
                    "month", "Feb", "02",
                    "month", "Mar", "03",
                    "month", "Apr", "04",
                    "month", "May", "05",
                    "month", "Jun", "06",
                    "month", "Jul", "07",
                    "month", "Aug", "08",
                    "month", "Sep", "09",
                    "month", "Oct", "10",
                    "month", "Nov", "11",
                    "month", "Dec", "12"

                       ]
               }

ruby
{ 
   code => "
           temp=Time.new;
           temp=temp.localtime.strftime ('%Y');
           event.set('date_year',temp);
           "
} 
  mutate 
      {  
         add_field =>
         {
            "timestamp" => "%{date_year}-%{month}-%{monthday}T%{time}.000Z"
         }
      }

date {
          match => [ "timestamp", "ISO8601" ]

      }
          mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

       mutate
      {
            remove_field => ["monthday","month","time","mytimestamp","@timestamp","received_at","date_year","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
       }




}

if [fields][log_type] == "firewall_log" {
grok {
      match => { "message" => "(?<mytimestamp>%{YEAR:year}-%{MONTHNUM:monthnum}-%{MONTHDAY:monthday}[T ]%{HOUR:hour}:?%{MINUTE:minute}(?::?%{SECOND:second})?) %{WORD:severity}: %{GREEDYDATA:log_message}" }

    }

mutate
      {
         add_field =>
         {
            "timestamp" => "%{year}-%{monthnum}-%{monthday}T%{hour}:%{minute}:%{second}.000Z"
         }
      }


  date {
          match => [ "timestamp", "ISO8601" ]

      }
         mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

mutate
      {
            remove_field => ["year","monthday","monthnum","hour","minute","mytimestamp","@timestamp","second","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
  }



}



if [fields][log_type] == "cronjob_log" {
grok {
      match => { "message" => "(?<mytimestamp>%{MONTH:month} +%{MONTHDAY:monthday} %{TIME:time}) %{SYSLOGHOST:hostname} %{DATA:program}(?:\((?:[a-zA-Z0-9._\-/]+)\))?\[%{INT:pid}\]: %{GREEDYDATA:log_message}" }
    }

  mutate {
               gsub => [
                    "month", "Jan", "01",
                    "month", "Feb", "02",
                    "month", "Mar", "03",
                    "month", "Apr", "04",
                    "month", "May", "05",
                    "month", "Jun", "06",
                    "month", "Jul", "07",
                    "month", "Aug", "08",
                    "month", "Sep", "09",
                    "month", "Oct", "10",
                    "month", "Nov", "11",
                    "month", "Dec", "12"

                       ]
               }

ruby
{
   code => "
           temp=Time.new;
           temp=temp.localtime.strftime ('%Y');
           event.set('date_year',temp);
           "
}

mutate
      {
         add_field =>
         {
            "timestamp" => "%{date_year}-%{month}-%{monthday}T%{time}.000Z"
         }
      }

date {
          match => [ "timestamp", "ISO8601" ]

      }

           mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

       mutate
      {
            remove_field => ["monthday","month","time","mytimestamp","@timestamp","received_at","date_year","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
       }


}

    if [fields][log_type] == "audit_log" {

grok {
        match => { "message" => ["type=%{WORD:type} msg=audit\(%{NUMBER:epoch}:%{NUMBER:counter}\): pid=%{NUMBER:pid} uid=%{NUMBER:uid} auid=%{NUMBER:audid} ses=%{NUMBER:subject} msg=%{GREEDYDATA:log_message}"]}
}
 grok {
        match => { "message" => ["type=%{WORD:type} msg=audit\(%{NUMBER:epoch}:%{NUMBER:counter}\): user pid=%{NUMBER:pid} uid=%{NUMBER:uid} auid=%{NUMBER:audid} subj=%{WORD:subject} msg=%{GREEDYDATA:log_message}"]}
}
grok {
        match => { "message" => ["type=%{WORD:type} msg=audit\(%{NUMBER:epoch}:%{NUMBER:counter}\): login pid=%{NUMBER:pid} uid=%{NUMBER:uid} old auid=%{NUMBER:old_auid} new auid=%{NUMBER:new_auid} old ses=%{NUMBER:ses} new ses=%{NUMBER:ses}"]}
      }

mutate
      {
            remove_field => ["@timestamp","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
       }




}


if [fields][log_type] == "zookeeper_log" {

grok {
         match => ["message", "(?<timestamp>%{TIMESTAMP_ISO8601}) \[myid:(%{NOTSPACE:myid})?\] - %{LOGLEVEL:severity} * \[(?:%{DATA:thread})?:(?<class>[A-Za-z0-9$_.]+)@%{NONNEGINT:line_no}\](?: - %{GREEDYDATA:log_message})?$"]
         overwrite => [ "message" ]
      }
if ([message] =~ "^java.net.ConnectException") {
      drop {}
  }
if ([message] =~ "^	at ") {
      drop {}
  }


date {
    match => [ "timestamp", ISO8601 ]
  }

    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["@timestamp","tmpTimestamp","@version","[beat][version]","ident","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
    convert => {"ts" => "integer"}
     }
}

if [fields][log_type] == "spark_log" {

grok {
         match => ["message", "(?<mytimestamp>%{YEAR:year}/%{MONTHNUM:monthnum}/%{MONTHDAY:monthday} %{HOUR:hour}:%{MINUTE:minute}:%{SECOND:second}) %{DATA:severity} (?<class>[A-Za-z0-9$_.]+): %{GREEDYDATA:log_message}$"]
         overwrite => [ "message" ]
      }

if ([message] =~ "^Spark Command:") {
      drop {}
  }
if ([message] =~ "^====") {
      drop {}
  }
if ([message] =~ "^Spark ") {
      drop {}
  } 

if ([message] =~ "^java.net.ConnectException") {
      drop {}
  }
if ([message] =~ "^	at") {
      drop {}
  }

if ([message] =~ "^org.") {
      drop {} 
  }
if ([message] =~ "^Resources ") {
      drop {}
  }   

mutate
      {
         add_field =>
         {
            "timestamp" => "%{year}-%{monthnum}-%{monthday}T%{hour}:%{minute}:%{second}.000Z"
         }  
      }


  date {
          match => [ "timestamp", "ISO8601" ]
          
      }

    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

mutate
      {
            remove_field => ["year","monthday","monthnum","hour","minute","mytimestamp","@timestamp","tmpTimestamp","@version","[beat][version]","index","type","id","version","score","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
  } 

}   

if [fields][log_type] == "kafka_log" {


grok {
         match => ["message", "\[(?<timestamp>%{TIMESTAMP_ISO8601})\] %{LOGLEVEL:severity} %{GREEDYDATA:log_message} \((?<class>[A-Za-z0-9$_.]+)\)$"]
         overwrite => [ "message" ]
      }

if ([message] =~ "^[\s]+") {
   drop {}
}


if ([message] =~ "^java.net.ConnectException") { 
      drop {} 
  }

if ([message] =~ "^ (kafka.server.KafkaConfig)") {
      drop {} 
  }
      

date {
    match => [ "timestamp", ISO8601 ] 
  } 
    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp","@timestamp","tmpTimestamp","@version","[beat][version]","index","type","id","version","score","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
    convert => {"ts" => "integer"}
     }

}

if [fields][log_type] == "hbase_log" {


grok {
         match => ["message", "(?<timestamp>%{TIMESTAMP_ISO8601}) %{LOGLEVEL:severity} * \[%{NOTSPACE:thread}\] (?<class>[A-Za-z0-9$_.]+): %{GREEDYDATA:log_message}$"]
         overwrite => [ "message" ]
      }

if ([message] =~ "^[\s]+") {
      drop {}
  }
if ([message] =~ "^[a-zA-Z]+") {
      drop {}
  }


if ([message] =~ "^java.*") {
      drop {}
  }

if ([message] =~ "^Caused*") {
      drop {}
  }
if ([message] =~ "^org*") {
      drop {}
  }
if ([message] =~ "^Resources*") {
      drop {}
  }
if ([message] =~ "^cpu*") {
      drop {}
  }

date {
    match => [ "timestamp", ISO8601 ]
  }

    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["@timestamp","tmpTimestamp","@version","[beat][version]","index","type","id","version","score","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
    convert => {"ts" => "integer"}
     }


}


if [fields][log_type] == "hadoop_log" {


grok {
         match => ["message", "(?<timestamp>%{TIMESTAMP_ISO8601}) %{LOGLEVEL:severity} (?<class>[A-Za-z0-9$_.]+)(?::%{GREEDYDATA:log_message})?$"]
         overwrite => [ "message" ]
      }
  
if ([message] =~ "^[\s]+") {
      drop {}
  }


if ([message] =~ "^java.*") {
      drop {}
  }

if ([message] =~ "^Caused*") {
      drop {}
  }
if ([message] =~ "^org*") {
      drop {}
  }
if ([message] =~ "^Resources*") {
      drop {}
  }
if ([message] =~ "^[a-zA-Z]+") {
      drop {}
  }
if ([message] =~ "^\/\*+") {
      drop {}
  }

if ([message] =~ "^GC*") {
      drop {}
  }
if ([message] =~ "^STARTUP_MSG*") {
      drop {}
  }


if ([message] =~ "\*+\/") {
      drop {}
  }
if ([message] =~ "^SHUTDOWN_MSG*") {
      drop {}
  }
date {
    match => [ "timestamp", ISO8601 ]
  }

    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["@timestamp","tmpTimestamp","@version","[beat][version]","index","type","id","version","score","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
    convert => {"ts" => "integer"}
     }

}


if [fields][log_type] == "elasticsearch_log" {

grok {
         match => ["message", "\[(?<timestamp>%{TIMESTAMP_ISO8601})\]\[%{LOGLEVEL:severity} *\]\[(?<class>[A-Za-z0-9$_.]+) *\](%{SPACE})?(?:\[(?<hostname>[A-Za-z0-9$_.]+) *\])?(?:%{SPACE})?%{GREEDYDATA:log_message}"]
         overwrite => [ "message" ]
      }

if ([message] =~ "^\tat*") {
      drop {}
  }

if ([message] =~ "^Spark Command:") {
      drop {}
  }
if ([message] =~ "^====") {
      drop {}
  }

if ([message] =~ "^java") {
      drop {}
  }

if ([message] =~ "^[a-zA-Z]+")
{
      drop {}
}
if ([message] =~ "^     at") {
      drop {}
  }

if ([message] =~ "^org.") {
      drop {} 
  }
if ([message] =~ "^Resources are low") {
      drop {}
  }   
if ([message] =~ "^Caused ") {
      drop {}
  }


  date {
          match => [ "timestamp", "ISO8601" ]
          
      }

    mutate{
    add_field => {"tmpTimestamp" => "%{timestamp}"
          }
       }

    ruby { code => "require 'date';event.set('ts', DateTime.parse(event.get('tmpTimestamp')).strftime('%Q'))" }
    mutate{
    remove_field => ["tmpTimestamp"]
    convert => {"ts" => "integer"}
     }

mutate
      {
            remove_field => ["year","monthday","monthnum","hour","minute","mytimestamp","@timestamp","tmpTimestamp","@version","[beat][version]","index","type","id","version","score","offset","[beat][hostname]","[beat][name]","rawrequest","source","tags"]
  } 

}   


}


output {
kafka {
        bootstrap_servers => "192.168.1.x:9092"
        topic_id => 'log-data-2.0.0'
        codec => json {}
        }

  
     stdout
       {
         codec => rubydebug
       }
}

